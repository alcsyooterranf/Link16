#include <iostream>
#include <bitset>
#include <algorithm>
#include "tools.h"

using namespace std;

#define SENDING
#ifdef SENDING
int main()
{
	//数据准备
	string message = "Hello, everyone! My name is Cai Siyuan, I come from China.";
	srand((unsigned)time(NULL));

	string bit_data = StrToBitStr(message);
	string raw_data = BitStrTostr(bit_data);
	cout << "bit_data = " << bit_data << endl;
	cout << "raw_data = " << raw_data << endl;

	//TODO:生成35bit报头(记得改回generateBIN(15)函数，先固定，方便调试)
	bitset<15> STN = bitset<15>("111110000010101");
	HeaderWord headerWord = HeaderWord(STN);
	headerWord.show();

	size_t bit_length = bit_data.length();
	//封装和发送过程：使用标准格式(STD)进行封装---按照初始字->扩展字->继续字的顺序排列
	int flag = 3;
	InitialWord iword;
	ExtendWord eword;
	ContinueWord cword;
	while (1) {
		bit_length = bit_data.length();
		if (bit_length <= 0) {
			//执行210bit奇偶校验及后续步骤，并退出
			handlerSTDP(headerWord, iword, eword, cword);
			iword.clear();
			eword.clear();
			cword.clear();
			break;
		}
		if (flag == 0 && bit_length > 0) {
			//执行210bit奇偶校验及后续步骤，并进行新一轮的打包
			handlerSTDP(headerWord, iword, eword, cword);
			iword.clear();
			eword.clear();
			cword.clear();
			flag = 3;
		}
		switch (flag)
		{
		case 3:
		{
			iword.clear();
			iword.handler_word(bit_data);
			iword.show();
			break;
		}
		case 2:
		{
			eword.clear();
			eword.handler_word(bit_data);
			eword.show();
			break;
		}
		case 1:
		{
			cword.clear();
			cword.handler_word(bit_data);
			cword.show();
			break;
		}
		default:
			break;
		}
		flag--;
	}
}
#endif

#ifdef RECIEVING
#include "decodeTools.h"
#include "STDPMsg.h"

int main()
{
	//正确数据
					 //"00101110011000010110111001101001011010000100001100100000011011010110111101110010011001100010000001100101011011010110111101100011001000000100100100100000001011000110111001100001011101010111100101101001010100110010000001101001011000010100001100100000011100110110100100100000011001010110110101100001011011100010000001111001010011010010000000100001011001010110111001101111011110010111001001100101011101100110010100100000001011000110111101101100011011000110010101001000"
	string real_data = "00101110011000010110111001101001011010000100001100100000011011010110111101110010011001100010000001100101011011010110111101100011001000000100100100100000001011000110111001100001011101010111100101101001010100110010000001101001011000010100001100100000011100110110100100100000011001010110110101100001011011100010000001111001010011010010000000100001011001010110111001101111011110010111001001100101011101100110010100100000001011000110111101101100011011000110010101001000";

	//数据准备(对照组)

						   //"10000000000000000000110111011101000001010000100110110000010011011101110111011101110111011101110111111101111111011111110111111101001011001011001000100110001100011010001011111100011110111111101010001110000111110010110100100111110101101100100111100000000110010100"
	string first_after_BIP = "10001100000000000001000011011101011001111011100010101001111101001101110111011101110111011101110111111101111111011111110111111101111100101000110001010010101001000101011011110001010110011001101011100111011011011011110011110000101000110100110010110001110011100100";

	string second_after_BIP = "10000000000000000001011000000000011001111001111010101001000100100000000000000000000000000000000011111101111111011111110111111101110100110110010001000000101000111000100110101101011011101110100010000010000110101110010011111010101111010110010001001111000001101000";

	string third_after_BIP = "10000000000000000001100100000000011001110110110110101001001000010000000000000000000000000000000011111101111111011111110111111101001111010110110110011111001011100101100010011110111111011111110001011100100010101000010110011111110101101100100010100001111100101001";

	//"10001100000000000010101100000000111010100001100011110011011101010000000000000000000000000000000011111101111111011111110111111101001011001011001000100110001100011010001011111100011110111111101010001110000111110010110100100111110101101100100111100000000110010100"
							   //"00010001000100000000000000000010000101100000000000000111000010100000001100000011000110010001011100001010000000000000000000000000000000000000000000000000000011110001101100011111000011110001110100011111000101000001011000001011000001000000100100010001000100010001010000001011000111100000011100010111000111100001010000001110000000110001110000010110000100100000111100010101000101100000100100011100000000000000110000010100"
	string first_bit_before_RS = "00010001000100000000000000000010000101100000000000000111000010100000001100000011000110010001011100001010000000000000000000000000000000000000000000000000000011110001101100011111000011110001110100011111000101000001011000001011000001000000100100010001000100010001010000001011000111100000011100010111000111100001010000001110000000110001110000010110000100100000111100010101000101100000100100011100000000000000110000010100";

	//"00010010000110000000000000000000000101010001011100001111000010100001111000010111000110010000001000010101000101110000111000011101000110110001011100001110000111110001101100011111000011110001110100011111000101100000110000000100000101000000111000000110000111110001010000001010000010000001111000001011000111110000111100000101000111100000000100000101000001110000101000000100000110100001010000011011000110110000111000011000"
	string second_bit_before_RS = "00010010000110000000000000000000000101010001011100001111000010100001111000010111000110010000001000010101000101110000111000011101000110110001011100001110000111110001101100011111000011110001110100011111000101100000110000000100000101000000111000000110000111110001010000001010000010000001111000001011000111110000111100000101000111100000000100000101000001110000101000000100000110100001010000011011000110110000111000011000";

	//"00010001000100000000000000000010000011000000000000000111000010100000000000000111000110010001010100011100000000000000000000000000000000000000000000000000000011110001101100011111000011110001110100011111000101110000001000011001000110100000010100011110000101100000111000000110000101110000100100011100000000000000010000001100000000000000100100011001000011000000010000001000000101010000101000001101000101110000100100011001"
	string third_bit_before_RS = "00010001000100000000000000000010000011000000000000000111000010100000000000000111000110010001010100011100000000000000000000000000000000000000000000000000000011110001101100011111000011110001110100011111000101110000001000011001000110100000010100011110000101100000111000000110000101110000100100011100000000000000010000001100000000000000100100011001000011000000010000001000000101010000101000001101000101110000100100011001";

	string before_weave



	string bit_data



	string bit_message;
	STDPMsg stdp_msg;

	////问题
	//char test_ch[ecclen];
	//for (int i = 0; i < ecclen; i++) {
	//    test_ch[i] = 'u';
	//}
	////正解
	//string test_str(ecclen, '0');
	//for (int i = 0; i < ecclen; i++) {
	//    test_str[i] = test_ch[i];
	//}
	//cout << "test_str = " << test_str << endl;
	//cout << "test_str_length = " << test_str.length() << endl;

	while (bit_data.length() != 0) {
		//截取一组消息
		cout << "当前消息长度为：" << bit_data.length() << endl;
		string str_group = getGroup(bit_data);
		//cout << "截取的字符串 = " << str_group << endl;
		//cout << "截取后bit_data = " << bit_data << endl;
		stdp_msg.setRawMsg(str_group);

		//解交织
		string str_weave = decode_weave(str_group);
		cout << "解交织后字符串 = " << str_weave << endl;

		//解RS编码、AES解密、BIP校验
		string str_data = decode_RS_AES_BIP_handler(str_weave);
		if (str_data.empty()) {
			return 2;
		}
		std::cout << "RS解码、AES解密后字符串 = " << str_data << std::endl;
		//for (int i = 0; i < RS_Length::data_31_15 * 3 + data_16_7; i++) {
		//	for (int j = 7; j >= 0; j--) {
		//		std::cout << ((str_data[i] >> j) & 1);
		//	}
		//}
		//std::cout << std::endl;

		//去HeaderWord
		str_data.erase(0, 35);
		//从InitialWord中取data
		bit_message += str_data.substr(13, 57);
		//去InitialWord
		str_data.erase(0, 75);
		//从ExtendWord中取data
		bit_message += str_data.substr(2, 68);
		//去ExtendWord
		str_data.erase(0, 75);
		//从ContinueWord中取data
		bit_message += str_data.substr(7, 63);
	}
	cout << "消息数据长度为：" << bit_message.length() << endl;
	cout << "消息为：" << bit_message << endl;
	cout << "真实消息为：" << real_data << endl;
	string last = BitStrTostr(real_data);
	cout << "最终转换后的消息为：" << last << endl;
}
#endif //

#ifdef DEBUG
const unsigned int BLOCK_BYTES_LENGTH = 16 * sizeof(unsigned char);
#include <bitset>
#include "dataType.h"

int main() {
	bitset<5> test = bitset<5>("10011");
	char ch = static_cast<char>(test.to_ulong());
	for (int j = 7; j >= 0; j--) {
		std::cout << ((ch >> j) & 1);
	}
}
#endif // DEBUG